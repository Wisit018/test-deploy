<div class="d-flex align-items-center justify-content-between flex-wrap gap-2 mb-4">
  <div>
    <h1 class="h4 fw-semibold mb-1">‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5/5 ‚Äì ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h1>
    <p class="text-muted mb-0">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥</p>
  </div>
  <a class="btn btn-outline-secondary" href="/workflow/step4?customerId=<%= customerId %>">‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 4/5</a>
  </div>

<div class="row g-3 mb-4">
  <div class="col-12">
    <div class="card">
      <div class="card-header">‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</div>
      <div class="card-body small py-2" data-step5-order-summary style="padding-top: 0.5rem !important;">
        <div class="text-muted">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4...</div>
      </div>
    </div>
  </div>
  <div class="col-12">
    <div class="card">
      <div class="card-header">‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</div>
      <div class="card-body">
        <form class="row g-3" data-step5-payment-form>
          
          <div class="col-12">
            <label class="form-label">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</label>
            <div class="table-responsive" style="max-height: 300px; overflow-y: auto;" data-step5-finance-options>
              <table class="table table-sm table-hover align-middle mb-0">
                <thead class="table-light sticky-top">
                  <tr>
                    <th style="width:42px"></th>
                    <th style="width:80px">Financetyp</th>
                    <th>Financedes</th>
                    <th style="width:100px">Fingrptype</th>
                    <th>Fingrpdesc</th>
                  </tr>
                </thead>
                <tbody data-step5-finance-table>
                  <tr>
                    <td colspan="5" class="text-center text-muted py-3">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô...</td>
                  </tr>
                </tbody>
              </table>
            </div>
            <div class="form-text text-muted" data-step5-finance-status>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</div>
          </div>
          

          <div class="col-12 col-lg-4">
            <label class="form-label">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</label>
            <input type="text" class="form-control" name="bankCode" placeholder="‡πÄ‡∏ä‡πà‡∏ô 003" data-auto-bankcode>
          </div>
          <div class="col-12 col-lg-4">
            <label class="form-label">‡∏™‡∏≤‡∏Ç‡∏≤</label>
            <input type="text" class="form-control" name="bankBranch" placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏∏‡∏£‡∏ß‡∏á‡∏®‡πå" data-auto-bankbranch>
          </div>
          <div class="col-12 col-lg-4">
            <label class="form-label">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</label>
            <input type="text" class="form-control" name="bankAccount" placeholder="‡πÄ‡∏ä‡πà‡∏ô 125-0-03676-1" data-auto-bankaccount>
          </div>

          <div class="col-12 col-lg-4">
            <label class="form-label">‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</label>
            <input type="text" class="form-control" name="creditIssuer" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£/‡∏ú‡∏π‡πâ‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£">
          </div>
          <div class="col-12 col-lg-4">
            <label class="form-label">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ï‡∏£</label>
            <input type="text" class="form-control" name="creditNo" placeholder="XXXX-XXXX-XXXX-XXXX" maxlength="23">
          </div>
          <div class="col-6 col-lg-2">
            <label class="form-label">‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</label>
            <input type="text" class="form-control" name="expMonth" placeholder="MM" maxlength="2">
          </div>
          <div class="col-6 col-lg-2">
            <label class="form-label">‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏õ‡∏µ</label>
            <input type="text" class="form-control" name="expYear" placeholder="YY" maxlength="2">
          </div>
          <div class="col-12 col-lg-2">
            <label class="form-label">‡∏£‡∏´‡∏±‡∏™ 3 ‡∏ï‡∏±‡∏ß</label>
            <input type="password" class="form-control" name="cvv" placeholder="CVV" maxlength="3">
          </div>

          <div class="col-12">
            <label class="form-label">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</label>
            <textarea class="form-control" rows="2" name="remark" placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"></textarea>
          </div>
        </form>
      </div>
      <div class="card-footer d-flex justify-content-between align-items-center flex-wrap gap-2">
        <div class="text-muted small">‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î Finish</div>
        <div class="d-flex gap-2">
          <a class="btn btn-outline-secondary" href="/workflow/step4?customerId=<%= customerId %>">‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</a>
          <button type="button" class="btn btn-success" data-step5-finish disabled>Finish</button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  (function(){
    const orderKey = 'workflow.step4Draft';
    const finishBtn = document.querySelector('[data-step5-finish]');
    const summaryEl = document.querySelector('[data-step5-order-summary]');
    
    const paymentForm = document.querySelector('[data-step5-payment-form]');
    const financeOptions = document.querySelector('[data-step5-finance-options]');
    const financeTable = document.querySelector('[data-step5-finance-table]');
    const financeStatus = document.querySelector('[data-step5-finance-status]');
    const autoBankCode = document.querySelector('[data-auto-bankcode]');
    const autoBankBranch = document.querySelector('[data-auto-bankbranch]');
    const autoBankAccount = document.querySelector('[data-auto-bankaccount]');
    
    let financeOptionsData = [];
    let selectedFinance = null;

    function format(num){
      const n = Number(num) || 0;
      return new Intl.NumberFormat('th-TH', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(n);
    }

    function renderSummary(){
      let state = null;
      try {
        const raw = sessionStorage.getItem(orderKey);
        state = raw ? JSON.parse(raw) : null;
      } catch(e) { state = null; }
      if (!state || !Array.isArray(state.products)) {
        summaryEl.innerHTML = '<div class="text-danger">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4</div>';
        if (finishBtn) finishBtn.setAttribute('disabled','disabled');
        return;
      }
      const subtotal = state.products.reduce((s,i)=> s + (Number(i.price)||0)*(Number(i.qty)||0), 0);
      const discount = state.products.reduce((s,i)=> s + (Number(i.discount)||0), 0);
      const shipping = state.shipping && state.shipping.noCharge ? 0 : Number(state.shipping && state.shipping.shippingCost) || 0;
      const total = Math.max(subtotal - discount + shipping, 0);

      const lines = [
        '<dl class="row mb-0" style="margin-bottom: 0 !important;">',
        '<dt class="col-sm-3" style="margin-bottom: 0.25rem !important;">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</dt><dd class="col-sm-9" style="margin-bottom: 0.25rem !important;">' + state.products.length + ' ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</dd>',
        '<dt class="col-sm-3" style="margin-bottom: 0.25rem !important;">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</dt><dd class="col-sm-9" style="margin-bottom: 0.25rem !important;">' + format(subtotal) + '</dd>',
        '<dt class="col-sm-3" style="margin-bottom: 0.25rem !important;">‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏£‡∏ß‡∏°</dt><dd class="col-sm-9" style="margin-bottom: 0.25rem !important;">' + format(discount) + '</dd>',
        '<dt class="col-sm-3" style="margin-bottom: 0.25rem !important;">‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</dt><dd class="col-sm-9" style="margin-bottom: 0.25rem !important;">' + format(shipping) + '</dd>',
        '<dt class="col-sm-3" style="margin-bottom: 0.25rem !important;">‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥</dt><dd class="col-sm-9 fw-semibold" style="margin-bottom: 0.25rem !important;">' + format(total) + '</dd>',
        '</dl>'
      ];
      summaryEl.innerHTML = lines.join('');
      if (finishBtn) finishBtn.removeAttribute('disabled');
    }

    if (finishBtn) {
      finishBtn.addEventListener('click', async function(){
        try {
          finishBtn.disabled = true;
          finishBtn.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...';
          
          // Collect all workflow data from sessionStorage
          const customerData = await getCustomerData();
          const deliveryData = getDeliveryData();
          const mediaChannelData = await getMediaChannelData();
          const productData = getProductData();
          const paymentData = await getPaymentData();
          
          // Debug: Log all data being sent
          console.log('Customer data being sent:', customerData);
          console.log('Delivery data being sent:', deliveryData);
          console.log('Media/Channel data being sent:', mediaChannelData);
          console.log('Product data being sent:', productData);
          console.log('Payment data being sent:', paymentData);
          
          // Debug shipping data specifically
          console.log('Shipping data details:', productData.shipping);
          console.log('Shipping cost:', productData.shipping?.shippingCost);
          console.log('No charge flag:', productData.shipping?.noCharge);
          
          // Get selected sales rep from sidebar first (most reliable)
          let selectedSalesRep = '';
          const sidebarSalesRepSelect = document.getElementById('sidebar-sales-rep');
          console.log('üîç Debug - sidebarSalesRepSelect found:', !!sidebarSalesRepSelect);
          
          if (sidebarSalesRepSelect && sidebarSalesRepSelect.value && sidebarSalesRepSelect.value !== '') {
            selectedSalesRep = sidebarSalesRepSelect.value;
            console.log('üîç Debug - selectedSalesRep from sidebar:', selectedSalesRep);
          } else {
            // Fallback to localStorage
            selectedSalesRep = localStorage.getItem('selectedSalesRep') || '';
            console.log('üîç Debug - selectedSalesRep from localStorage:', selectedSalesRep);
          }
          
          // If still no data, use 0
          if (!selectedSalesRep || selectedSalesRep === '' || selectedSalesRep === '0') {
            selectedSalesRep = '0';
            console.log('üîç Debug - No sales rep selected, using 0');
          }
          
          // Get sales rep options from the sidebar
          const salesRepOptions = [];
          if (sidebarSalesRepSelect) {
            Array.from(sidebarSalesRepSelect.options).forEach(option => {
              if (option.value) {
                salesRepOptions.push({
                  value: option.value,
                  label: option.textContent
                });
              }
            });
          }
          
          console.log('üîç Debug - salesRepOptions:', salesRepOptions);
          console.log('üîç Debug - selectedSalesRep final:', selectedSalesRep);
          
          // Send to save API
          const response = await fetch('/workflow/api/save-workflow', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              customerData,
              deliveryData,
              mediaChannelData,
              productData,
              paymentData,
              selectedSalesRep,
              salesRepOptions
            })
          });
          
          // Check if response is JSON
          const contentType = response.headers.get('content-type');
          if (!contentType || !contentType.includes('application/json')) {
            const text = await response.text();
            console.error('Non-JSON response:', text);
            throw new Error('Server returned non-JSON response. Status: ' + response.status);
          }
          
          const result = await response.json();
          
          if (result.success) {
            let message = `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á: ${result.deliverNum}\n‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ${format(result.total)} ‡∏ö‡∏≤‡∏ó\n‡∏™‡∏£‡πâ‡∏≤‡∏á ${result.recordsCreated} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;
            
            if (result.records && result.records.length > 0) {
              message += '\n\n‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:';
              result.records.forEach((record, index) => {
                message += `\n${index + 1}. ${record.datadesc} - ${record.title} (${record.code}) - ${format(record.amount)} ‡∏ö‡∏≤‡∏ó`;
              });
            }
            
            alert(message);
            // Clear session storage
            sessionStorage.removeItem('workflow.step4Draft');
            sessionStorage.removeItem('workflow.selectedDelivery');
            sessionStorage.removeItem('workflow.mediaChannelSelection');
            sessionStorage.removeItem('workflow.paymentSelection');
            // Redirect to dashboard
            window.location.href = '/dashboard';
          } else {
            throw new Error(result.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
          }
        } catch (error) {
          console.error('Save error:', error);
          alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
        } finally {
          finishBtn.disabled = false;
          finishBtn.textContent = 'Finish';
        }
      });
    }
    
    async function getCustomerData() {
      // Get customer data from URL parameter
      const urlParams = new URLSearchParams(window.location.search);
      const customerId = urlParams.get('customerId');
      
      if (!customerId) {
        console.warn('No customer ID found in URL');
        return { customerid: null };
      }
      
      try {
        // Fetch full customer data from API
        const response = await fetch(`/workflow/api/customers/${encodeURIComponent(customerId)}/deliveries`);
        if (response.ok) {
          const data = await response.json();
          console.log('Customer data from API:', data.customer);
          return data.customer;
        } else {
          console.warn('Failed to fetch customer data:', response.status);
          return { customerid: customerId };
        }
      } catch (error) {
        console.warn('Error fetching customer data:', error);
        return { customerid: customerId };
      }
    }
    
    function getDeliveryData() {
      try {
        const raw = sessionStorage.getItem('workflow.selectedDelivery');
        if (raw) {
          const parsed = JSON.parse(raw);
          return parsed.delivery?.data || {};
        }
      } catch (e) {
        console.warn('Could not parse delivery data from session');
      }
      return {};
    }
    
    async function getMediaChannelData() {
      try {
        const raw = sessionStorage.getItem('workflow.mediaChannelSelection');
        if (raw) {
          const selection = JSON.parse(raw);
          
          // Fetch media and channel names from API
          const responses = await Promise.all([
            fetch('/workflow/api/media-options'),
            fetch('/workflow/api/channel-options'),
          ]);
          
          let mediaName = '';
          let channelName = '';
          
          if (responses[0].ok) {
            const mediaRows = await responses[0].json();
            const foundMedia = mediaRows.find(function(item){ 
              return String(item.id) === String(selection.mediaId); 
            });
            if (foundMedia) {
              mediaName = foundMedia.medianame || foundMedia.mediaid || '';
            }
          }
          
          if (responses[1].ok) {
            const channelRows = await responses[1].json();
            const foundChannel = channelRows.find(function(item){ 
              return String(item.id) === String(selection.channelId); 
            });
            if (foundChannel) {
              channelName = foundChannel.channelname || foundChannel.channelid || '';
            }
          }
          
          return {
            mediaId: selection.mediaId,
            mediaName: mediaName,
            channelId: selection.channelId,
            channelName: channelName,
            keyword: selection.keyword,
            followUpDays: selection.followUpDays
          };
        }
      } catch (e) {
        console.warn('Could not parse media/channel data from session');
      }
      return {};
    }
    
    function getProductData() {
      try {
        const raw = sessionStorage.getItem('workflow.step4Draft');
        if (raw) {
          return JSON.parse(raw);
        }
      } catch (e) {
        console.warn('Could not parse product data from session');
      }
      return { products: [], shipping: {} };
    }
    
    async function getPaymentData() {
      try {
        const raw = sessionStorage.getItem('workflow.paymentSelection');
        if (raw) {
          const parsed = JSON.parse(raw);
          
          // Fetch bank details from finance options if financetype is available
          let bankNo = '';
          let bankNa = '';
          let bankBr = '';
          let bankAc = '';
          
          if (parsed.financetype) {
            try {
              const response = await fetch('/workflow/api/finance-options');
              if (response.ok) {
                const financeOptions = await response.json();
                const selectedFinance = financeOptions.find(option => 
                  String(option.financetype) === String(parsed.financetype)
                );
                if (selectedFinance) {
                  bankNo = selectedFinance.bankno || '';
                  bankNa = selectedFinance.bankna || '';
                  bankBr = selectedFinance.bankbr || '';
                  bankAc = selectedFinance.bankac || '';
                }
              }
            } catch (err) {
              console.warn('Could not fetch bank details:', err);
            }
          }
          
          return {
            payType: parsed.financetype || '',
            payDesc: parsed.financedes || '',
            payType1: '',
            subPay1: '',
            subPay2: '',
            cusBankNo: '',
            cusBankNa: '',
            cusBankBr: '',
            cusBankAc: '',
            cusBankRef: '',
            credit: false,
            creditType: '',
            creditDesc: '',
            creditNo: '',
            creditExpM: '',
            creditExpY: '',
            creditRef: '',
            last3Digit: '',
            bankNo: bankNo,
            bankNa: bankNa,
            bankBr: bankBr,
            bankAc: bankAc,
            bankRef: '',
            financeType: parsed.financetype || '', // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ financetype
            financeDesc: parsed.financedes || '', // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ financedes
            remark: ''
          };
        }
      } catch (e) {
        console.warn('Could not parse payment data from session');
      }
      return {};
    }

    async function loadFinanceOptions(){
      try {
        console.log('üîÑ Loading finance options...');
        const res = await fetch('/workflow/api/finance-options');
        if (!res.ok) throw new Error(await res.text() || '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
        const rows = await res.json();
        console.log('üìä Finance options loaded:', rows.length, 'items');
        console.log('üìä First few items:', rows.slice(0, 3));
        financeOptionsData = rows;
        renderFinanceTable();
      } catch(err){
        if (financeStatus) financeStatus.textContent = err && err.message ? err.message : '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß';
        if (financeTable) {
          financeTable.innerHTML = '<tr><td colspan="5" class="text-center text-danger py-3">' + (err && err.message ? err.message : '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß') + '</td></tr>';
        }
      }
    }
    
    function renderFinanceTable() {
      if (!financeTable) {
        console.log('‚ùå financeTable not found');
        return;
      }
      
      console.log('üé® Rendering finance table with', financeOptionsData.length, 'items');
      
      if (!financeOptionsData.length) {
        financeTable.innerHTML = '<tr><td colspan="5" class="text-center text-muted py-3">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</td></tr>';
        return;
      }
      
      console.log('üìä Finance options data:', financeOptionsData);
      console.log('üìä First item financetype:', financeOptionsData[0]?.financetype);
      
      let rowsHtml = '';
      financeOptionsData.forEach(function(r){
        console.log('üì¶ Processing finance item:', r);
        console.log('üì¶ financetype value:', r.financetype, 'type:', typeof r.financetype);
        const financetyp = (r.financetype !== null && r.financetype !== undefined) ? String(r.financetype) : '-';
        const financedes = (r.financedes ? String(r.financedes) : '-');
        const fingrptype = (r.fingrptype ?? '');
        const fingrpdesc = (r.fingrpdesc ? String(r.fingrpdesc) : '-');
        
        // Use actual fingrptype and fingrpdesc from database
        const displayFingrptype = String(fingrptype || '-');
        const displayFingrpdesc = String(fingrpdesc || '-');
        
        const isSelected = selectedFinance && selectedFinance.financetype === financetyp;
        const selectedIcon = isSelected ? '‚ñ∂' : '';
        const selectedClass = isSelected ? 'table-active' : '';
        
        const optionData = {
          financetype: String(financetyp),
          financedes: financedes,
          fingrptype: String(fingrptype || ''),
          fingrpdesc: fingrpdesc,
          bankno: (r.bankno ? String(r.bankno) : ''),
          bankna: (r.bankna ? String(r.bankna) : ''),
          bankbr: (r.bankbr ? String(r.bankbr) : ''),
          bankac: (r.bankac ? String(r.bankac) : ''),
        };
        
        rowsHtml += '<tr class="' + selectedClass + '" data-finance-option="' + escapeHtml(String(financetyp)) + '" data-finance-data="' + encodeURIComponent(JSON.stringify(optionData)) + '" style="cursor: pointer;">';
        rowsHtml += '<td>' + selectedIcon + '</td>';
        rowsHtml += '<td>' + escapeHtml(financetyp) + '</td>';
        rowsHtml += '<td>' + escapeHtml(financedes) + '</td>';
        rowsHtml += '<td>' + escapeHtml(displayFingrptype) + '</td>';
        rowsHtml += '<td>' + escapeHtml(displayFingrpdesc) + '</td>';
        rowsHtml += '</tr>';
      });
      
      financeTable.innerHTML = rowsHtml;
    }

    // Add escapeHtml function
    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
    
    // Add event listener for finance table clicks using event delegation
    if (financeTable) {
      console.log('üîß Adding click listener to finance table');
      financeTable.addEventListener('click', function(event) {
        console.log('üñ±Ô∏è Finance table clicked:', event.target);
        
        // Find the closest row with data-finance-option
        let target = event.target.closest('tr[data-finance-option]');
        if (!target) {
          // If not found, try to find from parent elements
          target = event.target.closest('[data-finance-option]');
        }
        
        console.log('üéØ Closest finance option:', target);
        if (!target) {
          console.log('‚ùå No finance option found');
          return;
        }
        
        const financeDataRaw = target.getAttribute('data-finance-data');
        console.log('üìä Finance data raw:', financeDataRaw);
        if (!financeDataRaw) {
          console.log('‚ùå No finance data found');
          return;
        }
        
        try {
          const decodedData = decodeURIComponent(financeDataRaw);
          console.log('üìä Decoded data:', decodedData);
          const financeData = JSON.parse(decodedData);
          selectedFinance = financeData;
          
          // Update status
          if (financeStatus) financeStatus.textContent = financeData.financedes || '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß';
          
          // Save to session storage
          sessionStorage.setItem('workflow.paymentSelection', JSON.stringify({ 
            financetype: financeData.financetype, 
            financedes: financeData.financedes,
            fingrptype: financeData.fingrptype,
            fingrpdesc: financeData.fingrpdesc,
            bankno: financeData.bankno,
            bankna: financeData.bankna,
            bankbr: financeData.bankbr,
            bankac: financeData.bankac
          }));
          
          // Auto-fill bank details
          if (autoBankCode) autoBankCode.value = financeData.bankno || '';
          if (autoBankBranch) autoBankBranch.value = financeData.bankbr || '';
          if (autoBankAccount) autoBankAccount.value = financeData.bankac || '';
          
          // Enable finish button
          if (finishBtn) finishBtn.removeAttribute('disabled');
          
          // Update table row selection without re-rendering entire table
          const allRows = financeTable.querySelectorAll('tr[data-finance-option]');
          allRows.forEach(row => {
            row.classList.remove('table-active');
            const iconCell = row.querySelector('td:first-child');
            if (iconCell) iconCell.textContent = '';
          });
          
          // Highlight selected row
          target.classList.add('table-active');
          const selectedIconCell = target.querySelector('td:first-child');
          if (selectedIconCell) selectedIconCell.textContent = '‚ñ∂';
          
        } catch (err) {
          console.error('Error parsing finance data:', err);
        }
      });
    }

    renderSummary();
    loadFinanceOptions();
    
    // Debug: Check if elements exist
    console.log('üîç Debug - financeTable exists:', !!financeTable);
    console.log('üîç Debug - financeOptions exists:', !!financeOptions);
    console.log('üîç Debug - financeStatus exists:', !!financeStatus);
  })();
</script>


