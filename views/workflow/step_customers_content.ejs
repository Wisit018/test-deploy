<% const reps = salesRepOptions || []; %>
<div class="d-flex align-items-center justify-content-between flex-wrap gap-2 mb-4">
  <div>
    <h1 class="h4 fw-semibold mb-1">ขั้นตอนที่ 1/5 – เลือกลูกค้า</h1>
    <p class="text-muted mb-0">เลือกลูกค้าที่ต้องการ หรือเพิ่มลูกค้าใหม่ให้ครบถ้วนก่อนดำเนินการต่อ</p>
  </div>
  <a class="btn btn-outline-secondary" href="/dashboard">ดูแดชบอร์ดเดิม</a>
</div>

<div class="row g-4">
  <div class="col-12 col-xl-7">
    <div class="card h-100">
      <div class="card-header d-flex flex-wrap gap-2 align-items-center justify-content-between">
        <div>
          <strong>เลือกลูกค้าที่มีอยู่</strong>
          <div class="text-muted small">แสดงรายการล่าสุด 200 รายการ</div>
        </div>
        <div class="ms-auto">
          <input type="search" class="form-control" placeholder="ค้นหาด้วยชื่อ / เบอร์โทร / รหัส" data-customer-search>
        </div>
      </div>
      <div class="card-body p-0">
        <div class="table-responsive">
          <table class="table table-hover table-sm align-middle mb-0" data-customers-table>
            <thead class="table-light">
              <tr>
                <th style="width:42px"></th>
                <th>รหัส</th>
                <th>ชื่อ-สกุล</th>
                <th>โทรศัพท์</th>
                <th style="width:150px" class="text-end">การจัดการ</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td colspan="5" class="text-center text-muted py-4">กำลังโหลดข้อมูล...</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <div class="card-footer d-flex flex-column flex-sm-row gap-2 align-items-stretch align-items-sm-center">
        <div class="flex-grow-1 text-muted" data-selected-summary>ยังไม่ได้เลือกลูกค้า</div>
        <button type="button" class="btn btn-primary" data-next-step disabled>ไปขั้นตอนถัดไป</button>
      </div>
    </div>
  </div>

  <div class="col-12 col-xl-5">
    <div class="card h-100">
      <div class="card-header d-flex justify-content-between align-items-center">
        <strong data-form-title>เพิ่มลูกค้าใหม่</strong>
        <button type="button" class="btn btn-sm btn-outline-secondary d-none" data-cancel-edit>ยกเลิกการแก้ไข</button>
      </div>
      <div class="card-body">
        <div class="alert alert-success d-none" data-feedback></div>
        <form class="row g-3" data-customer-form>
          <input type="hidden" name="id" data-field-id>
          <div class="col-12 col-md-6">
            <label class="form-label">Customer ID</label>
            <input type="text" name="customerid" class="form-control" placeholder="ระบบกำหนดอัตโนมัติ" readonly>
          </div>
          <div class="col-12 col-md-6">
            <label class="form-label">พนักงานขาย</label>
            <select name="salerepid" class="form-select">
              <option value="">— เลือกพนักงานขาย —</option>
              <% reps.forEach(function(rep){ %>
                <option value="<%= rep.value %>"><%= rep.label %></option>
              <% }); %>
            </select>
          </div>

          <div class="col-12 col-md-6">
            <label class="form-label">คำนำหน้า</label>
            <input type="text" name="prename" class="form-control" maxlength="50">
          </div>
          <div class="col-12 col-md-6">
            <label class="form-label">แท็กลูกค้า</label>
            <input type="text" name="custtag" class="form-control" maxlength="120">
          </div>

          <div class="col-12 col-md-6">
            <label class="form-label">ชื่อ *</label>
            <input type="text" name="firstname" class="form-control" required maxlength="100">
          </div>
          <div class="col-12 col-md-6">
            <label class="form-label">นามสกุล *</label>
            <input type="text" name="lastname" class="form-control" required maxlength="100">
          </div>

          <div class="col-12 col-md-6">
            <label class="form-label">เบอร์ติดต่อ *</label>
            <input type="tel" name="mobiletel" class="form-control" inputmode="tel" maxlength="20" required>
          </div>
          <div class="col-12 col-md-6">
            <label class="form-label">อีเมล</label>
            <input type="email" name="email" class="form-control" maxlength="120">
          </div>

          <div class="col-12 col-md-6">
            <label class="form-label">ไลน์ไอดี</label>
            <input type="text" name="lineid" class="form-control" maxlength="120">
          </div>
          <div class="col-12 col-md-6">
            <label class="form-label">วันเกิด</label>
            <input type="date" name="birthday" class="form-control">
          </div>

          <div class="col-12 col-md-6">
            <label class="form-label">เพศ</label>
            <select name="sex" class="form-select">
              <option value="">ไม่ระบุ</option>
              <option value="M">ชาย</option>
              <option value="F">หญิง</option>
              <option value="O">อื่น ๆ</option>
            </select>
          </div>
          <div class="col-12 col-md-6">
            <label class="form-label">อายุ</label>
            <input type="number" name="age" class="form-control" min="0" step="1">
          </div>

          <div class="col-12 col-md-6">
            <label class="form-label">น้ำหนัก (กก.)</label>
            <input type="number" name="weight" class="form-control" step="0.1">
          </div>
          <div class="col-12 col-md-6">
            <label class="form-label">ส่วนสูง (ซม.)</label>
            <input type="number" name="height" class="form-control" step="0.1">
          </div>

          <div class="col-12 col-md-6">
            <label class="form-label">บ้านเลขที่</label>
            <input type="text" name="homenum" class="form-control" maxlength="100">
          </div>
          <div class="col-12 col-md-6">
            <label class="form-label">หมู่ที่</label>
            <input type="text" name="moo" class="form-control" maxlength="50">
          </div>

          <div class="col-12 col-md-6">
            <label class="form-label">อาคาร</label>
            <input type="text" name="building" class="form-control" maxlength="120">
          </div>
          <div class="col-12 col-md-6">
            <label class="form-label">ซอย</label>
            <input type="text" name="soi" class="form-control" maxlength="120">
          </div>

          <div class="col-12 col-md-6">
            <label class="form-label">ถนน</label>
            <input type="text" name="road" class="form-control" maxlength="120">
          </div>
          <div class="col-12 col-md-6">
            <label class="form-label">แขวง / ตำบล</label>
            <input type="text" name="kwang" class="form-control" maxlength="120">
          </div>

          <div class="col-12 col-md-6">
            <label class="form-label">เขต / อำเภอ</label>
            <input type="text" name="kate" class="form-control" maxlength="120">
          </div>
          <div class="col-12 col-md-6">
            <label class="form-label">จังหวัด</label>
            <input type="text" name="province" class="form-control" maxlength="120">
          </div>

          <div class="col-12 col-md-6">
            <label class="form-label">รหัสไปรษณีย์</label>
            <input type="tel" name="zipcode" class="form-control" maxlength="10" inputmode="numeric">
          </div>

          <div class="col-12">
            <button type="button" class="btn btn-outline-secondary btn-sm" data-address-add>
              <i class="bi bi-plus-circle me-1"></i>เพิ่มที่อยู่เพิ่มเติม
            </button>
            <div class="text-muted small mt-1">เพิ่มได้สูงสุด 5 ช่อง เมื่อไม่ต้องการสามารถกด "ลบ" เพื่อล้างช่องนั้นได้</div>
          </div>
          
          <div class="col-12 d-none" data-address-field="addr1">
            <div class="d-flex justify-content-between align-items-center">
              <label class="form-label mb-1">ที่อยู่เพิ่มเติม</label>
              <button type="button" class="btn btn-link btn-sm text-danger px-0" data-address-remove="addr1">ลบ</button>
            </div>
            <textarea name="addr1" class="form-control" rows="2" maxlength="255"></textarea>
          </div>
          <div class="col-12 d-none" data-address-field="addr2">
            <div class="d-flex justify-content-between align-items-center">
              <label class="form-label mb-1">ที่อยู่อื่น ๆ 1</label>
              <button type="button" class="btn btn-link btn-sm text-danger px-0" data-address-remove="addr2">ลบ</button>
            </div>
            <textarea name="addr2" class="form-control" rows="2" maxlength="255"></textarea>
          </div>
          <div class="col-12 d-none" data-address-field="addr3">
            <div class="d-flex justify-content-between align-items-center">
              <label class="form-label mb-1">ที่อยู่อื่น ๆ 2</label>
              <button type="button" class="btn btn-link btn-sm text-danger px-0" data-address-remove="addr3">ลบ</button>
            </div>
            <textarea name="addr3" class="form-control" rows="2" maxlength="255"></textarea>
          </div>
          <div class="col-12 d-none" data-address-field="addr4">
            <div class="d-flex justify-content-between align-items-center">
              <label class="form-label mb-1">ที่อยู่อื่น ๆ 3</label>
              <button type="button" class="btn btn-link btn-sm text-danger px-0" data-address-remove="addr4">ลบ</button>
            </div>
            <textarea name="addr4" class="form-control" rows="2" maxlength="255"></textarea>
          </div>
          <div class="col-12 d-none" data-address-field="addr5">
            <div class="d-flex justify-content-between align-items-center">
              <label class="form-label mb-1">ที่อยู่อื่น ๆ 4</label>
              <button type="button" class="btn btn-link btn-sm text-danger px-0" data-address-remove="addr5">ลบ</button>
            </div>
            <textarea name="addr5" class="form-control" rows="2" maxlength="255"></textarea>
          </div>

          <div class="col-12 col-md-6">
            <label class="form-label">โรคประจำตัว 1</label>
            <input type="text" name="sickness1" class="form-control" maxlength="120">
          </div>
          <div class="col-12 col-md-6">
            <label class="form-label">โรคประจำตัว 2</label>
            <input type="text" name="sickness2" class="form-control" maxlength="120">
          </div>

          <div class="col-12 col-md-6">
            <div class="form-check mt-4">
              <input class="form-check-input" type="checkbox" name="baned" value="1" id="field-baned">
              <label class="form-check-label" for="field-baned">แบนลูกค้า</label>
            </div>
          </div>
          <div class="col-12 col-md-6">
            <label class="form-label">เหตุผลการแบน</label>
            <input type="text" name="banremark" class="form-control" maxlength="255">
          </div>

          <div class="col-12 d-grid gap-2">
            <button type="submit" class="btn btn-success" data-submit-btn>บันทึกลูกค้าใหม่</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
  (function(){
    const state = {
      customers: [],
      filtered: [],
      selectedId: null,
      editingId: null,
      isSelecting: false, // Flag to prevent infinite loops
    };

    const customersApi = '<%= customersApi %>';
    const nextStepUrl = '<%= nextStepUrl %>';

    const tableBody = document.querySelector('[data-customers-table] tbody');
    const searchInput = document.querySelector('[data-customer-search]');
    const summaryEl = document.querySelector('[data-selected-summary]');
    const nextBtn = document.querySelector('[data-next-step]');
    const form = document.querySelector('[data-customer-form]');
    const submitBtn = form?.querySelector('[data-submit-btn]');
    const cancelEditBtn = document.querySelector('[data-cancel-edit]');
    const feedback = document.querySelector('[data-feedback]');
    const formTitle = document.querySelector('[data-form-title]');
    const addAddressBtn = document.querySelector('[data-address-add]');
    const addressFields = ['addr1', 'addr2', 'addr3', 'addr4', 'addr5'];

    const checkboxFields = ['baned'];

    function setSummary(text, variant) {
      if (!summaryEl) return;
      summaryEl.textContent = text;
      summaryEl.classList.remove('text-muted', 'text-success');
      summaryEl.classList.add(variant === 'success' ? 'text-success' : 'text-muted');
    }

    function setFormMode(mode) {
      if (!submitBtn || !formTitle) return;
      if (mode === 'edit') {
        submitBtn.textContent = 'อัปเดตข้อมูลลูกค้า';
        formTitle.textContent = 'แก้ไขข้อมูลลูกค้า';
        cancelEditBtn?.classList.remove('d-none');
      } else {
        submitBtn.textContent = 'บันทึกลูกค้าใหม่';
        formTitle.textContent = 'เพิ่มลูกค้าใหม่';
        cancelEditBtn?.classList.add('d-none');
      }
    }

    function resetForm() {
      if (!form) return;
      form.reset();
      const idInput = form.querySelector('[data-field-id]');
      if (idInput) idInput.value = '';
      const customerIdInput = form.elements['customerid'];
      if (customerIdInput) customerIdInput.value = '';
      checkboxFields.forEach((field) => {
        const input = form.elements[field];
        if (input) input.checked = false;
      });
      addressFields.forEach((field) => {
        hideAddressField(field, { clearValue: true });
      });
      state.editingId = null;
      setFormMode('create');
    }

    function renderCustomers() {
      if (!tableBody) return;
      if (!state.filtered.length) {
        tableBody.innerHTML = '<tr><td colspan="5" class="text-center text-muted py-4">ไม่พบลูกค้า</td></tr>';
        return;
      }
      tableBody.innerHTML = state.filtered
        .map((item) => {
          const fullName = [item.firstname, item.lastname].filter(Boolean).join(' ') || '-';
          const phone = item.mobiletel || '-';
          const checked = state.selectedId && String(state.selectedId) === String(item.id) ? 'checked' : '';
          return `
            <tr data-row-id="${item.id}">
              <td><input type="radio" name="selectedCustomer" value="${item.id}" ${checked}></td>
              <td>${item.customerid || '-'}</td>
              <td>${fullName}</td>
              <td>${phone}</td>
              <td class="text-end">
                <div class="btn-group btn-group-sm">
                  <button type="button" class="btn btn-outline-secondary" data-edit="${item.id}">แก้ไข</button>
                  <button type="button" class="btn btn-outline-danger" data-delete="${item.id}">ลบ</button>
                </div>
              </td>
            </tr>
          `;
        })
        .join('');
    }

    function applyFilter() {
      const keyword = (searchInput?.value || '').trim().toLowerCase();
      if (!keyword) {
        state.filtered = [...state.customers];
      } else {
      state.filtered = state.customers.filter((item) => {
        const name = [item.firstname, item.lastname].filter(Boolean).join(' ').toLowerCase();
        const phone = String(item.mobiletel || '').toLowerCase();
        const code = String(item.customerid || '').toLowerCase();
        return name.includes(keyword) || phone.includes(keyword) || code.includes(keyword);
        });
      }
      renderCustomers();
    }

    async function loadCustomers() {
      try {
        if (tableBody) {
          tableBody.innerHTML = '<tr><td colspan="5" class="text-center text-muted py-4">กำลังโหลดข้อมูล...</td></tr>';
        }
        const res = await fetch(`${customersApi}?limit=200`);
        if (!res.ok) throw new Error('โหลดข้อมูลลูกค้าไม่สำเร็จ');
        const data = await res.json();
        if (!Array.isArray(data)) throw new Error('โครงสร้างข้อมูลไม่ถูกต้อง');
        state.customers = data.map((row) => ({
          id: row.id,
          customerid: row.customerid,
          firstname: row.firstname,
          lastname: row.lastname,
          mobiletel: row.mobiletel,
        }));
        applyFilter();
      } catch (err) {
        if (tableBody) {
          tableBody.innerHTML = `<tr><td colspan=\"5\" class=\"text-center text-danger py-4\">${err.message || 'เกิดข้อผิดพลาดในการโหลดข้อมูล'}</td></tr>`;
        }
      }
    }

    function handleSelectionChange(id) {
      // Prevent infinite loops
      if (state.isSelecting) return;
      
      state.selectedId = id;
      
      // Update radio button selection
      if (tableBody) {
        const radioButtons = tableBody.querySelectorAll('input[name="selectedCustomer"]');
        radioButtons.forEach(radio => {
          radio.checked = String(radio.value) === String(id);
        });
      }
      
      // Populate form with selected customer data (fetch from API like edit)
      if (id && form) {
        state.isSelecting = true;
        loadCustomerForEdit(id).finally(() => {
          state.isSelecting = false;
        });
      }
      
      if (nextBtn) {
        if (id) {
          nextBtn.removeAttribute('disabled');
          const picked = state.customers.find((item) => String(item.id) === String(id));
          const fullName = picked ? [picked.firstname, picked.lastname].filter(Boolean).join(' ') : '';
          setSummary(fullName ? `เลือกลูกค้า: ${fullName}` : `เลือกรายการ #${id}`, 'success');
        } else {
          nextBtn.setAttribute('disabled', 'disabled');
          setSummary('ยังไม่ได้เลือกลูกค้า');
        }
      }
    }

    function populateForm(record) {
      if (!form || !record) return;
      const idInput = form.querySelector('[data-field-id]');
      if (idInput) idInput.value = record.id || '';
      Object.keys(record).forEach((key) => {
        const value = record[key];
        const input = form.elements[key];
        if (!input) return;
        if (input instanceof HTMLInputElement || input instanceof HTMLTextAreaElement) {
          if (input.type === 'checkbox') {
            input.checked = value === 1 || value === true || value === '1';
          } else if (input.type === 'date') {
            input.value = value ? String(value).slice(0, 10) : '';
          } else {
            input.value = value == null ? '' : String(value);
          }
        } else if (input instanceof HTMLSelectElement) {
          const stringValue = value == null ? '' : String(value);
          const optionExists = Array.from(input.options).some((opt) => opt.value === stringValue);
          if (!optionExists && stringValue) {
            const opt = document.createElement('option');
            opt.value = stringValue;
            opt.textContent = stringValue;
            input.appendChild(opt);
          }
          input.value = stringValue;
        }
      });
      addressFields.forEach((field) => {
        const textarea = form.elements[field];
        if (!textarea) return;
        if (textarea.value && String(textarea.value).trim()) {
          showAddressField(field);
        } else {
          hideAddressField(field, { clearValue: false });
        }
      });
      updateAddressControls();
    }

    tableBody?.addEventListener('change', (event) => {
      if (event.target && event.target.name === 'selectedCustomer') {
        handleSelectionChange(event.target.value);
      }
    });

    tableBody?.addEventListener('click', (event) => {
      const editBtn = event.target.closest('[data-edit]');
      if (editBtn) {
        const id = editBtn.getAttribute('data-edit');
        if (id) {
          loadCustomerForEdit(id);
        }
        event.stopPropagation();
        return;
      }
      const deleteBtn = event.target.closest('[data-delete]');
      if (deleteBtn) {
        const id = deleteBtn.getAttribute('data-delete');
        if (id) {
          deleteCustomer(id);
        }
        event.stopPropagation();
        return;
      }
      const row = event.target.closest('tr[data-row-id]');
      if (row) {
        const radio = row.querySelector('input[name="selectedCustomer"]');
        if (radio) {
          radio.checked = true;
          handleSelectionChange(radio.value);
        }
      }
    });

    searchInput?.addEventListener('input', () => {
      applyFilter();
    });

    nextBtn?.addEventListener('click', () => {
      if (!state.selectedId) return;
      const url = `${nextStepUrl}?customerId=${encodeURIComponent(state.selectedId)}`;
      window.location.href = url;
    });

    cancelEditBtn?.addEventListener('click', () => {
      resetForm();
    });

    addAddressBtn?.addEventListener('click', () => {
      showNextAddressField();
    });

    form?.addEventListener('submit', async (event) => {
      event.preventDefault();
      if (!form || !submitBtn) return;
      submitBtn.disabled = true;
      feedback?.classList.add('d-none');

      const formData = new FormData(form);
      const payload = {};
      Array.from(form.elements).forEach((el) => {
        if (!(el instanceof HTMLInputElement || el instanceof HTMLTextAreaElement || el instanceof HTMLSelectElement)) return;
        const name = el.name;
        if (!name) return;
        if (name === 'id') return;
        if (el.type === 'checkbox') {
          payload[name] = el.checked ? 1 : 0;
        } else {
          const value = formData.get(name);
          if (value == null) return;
          const trimmed = typeof value === 'string' ? value.trim() : value;
          payload[name] = trimmed === '' ? null : trimmed;
        }
      });

      if (!payload.firstname || !payload.lastname || !payload.mobiletel) {
        alert('กรุณากรอกข้อมูลชื่อ นามสกุล และเบอร์ติดต่อ');
        submitBtn.disabled = false;
        return;
      }

      try {
        let url = customersApi;
        let method = 'POST';
        if (state.editingId) {
          url = `${customersApi}/${encodeURIComponent(state.editingId)}`;
          method = 'PUT';
        }
        const res = await fetch(url, {
          method,
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        });
        if (!res.ok) {
          const message = await res.text();
          throw new Error(message || 'บันทึกไม่สำเร็จ');
        }
        const responseData = await res.json().catch(() => ({}));
        feedback?.classList.remove('d-none');
        if (state.editingId) {
          feedback && (feedback.textContent = 'อัปเดตข้อมูลลูกค้าเรียบร้อย');
        } else {
          feedback && (feedback.textContent = 'เพิ่มลูกค้าใหม่เรียบร้อย');
          if (responseData && responseData.id) {
            state.selectedId = responseData.id;
          }
        }
        await loadCustomers();
        if (state.selectedId) {
          handleSelectionChange(state.selectedId);
        }
        resetForm();
      } catch (err) {
        alert(err.message || 'เกิดข้อผิดพลาดขณะบันทึกข้อมูล');
      } finally {
        submitBtn.disabled = false;
      }
    });

    async function loadCustomerForEdit(id) {
      if (!form) return;
      try {
        const res = await fetch(`${customersApi}/${encodeURIComponent(id)}`);
        if (!res.ok) throw new Error('ไม่พบข้อมูลลูกค้าที่ต้องการแก้ไข');
        const data = await res.json();
        populateForm(data || {});
        state.editingId = id;
        setFormMode('edit');
        state.selectedId = id;
        // Only call handleSelectionChange if not already selecting to prevent loops
        if (!state.isSelecting) {
          handleSelectionChange(id);
        }
        window.scrollTo({ top: form.getBoundingClientRect().top + window.scrollY - 80, behavior: 'smooth' });
      } catch (err) {
        alert(err.message || 'ไม่สามารถโหลดข้อมูลเพื่อแก้ไขได้');
      }
    }

    async function deleteCustomer(id) {
      if (!confirm('ต้องการลบลูกค้ารายการนี้หรือไม่?')) return;
      try {
        const res = await fetch(`${customersApi}/${encodeURIComponent(id)}`, {
          method: 'DELETE',
        });
        if (!res.ok) {
          const message = await res.text();
          throw new Error(message || 'ลบไม่สำเร็จ');
        }
        if (state.selectedId && String(state.selectedId) === String(id)) {
          state.selectedId = null;
          setSummary('ยังไม่ได้เลือกลูกค้า');
          nextBtn?.setAttribute('disabled', 'disabled');
        }
        if (state.editingId && String(state.editingId) === String(id)) {
          resetForm();
        }
        await loadCustomers();
      } catch (err) {
        alert(err.message || 'เกิดข้อผิดพลาดขณะลบข้อมูล');
      }
    }

    function getAddressWrapper(name) {
      if (!form) return null;
      return form.querySelector(`[data-address-field="${name}"]`);
    }

    function updateAddressControls() {
      if (!addAddressBtn) return;
      const hasHidden = addressFields.some((field) => {
        const wrapper = getAddressWrapper(field);
        return wrapper && wrapper.classList.contains('d-none');
      });
      if (hasHidden) {
        addAddressBtn.removeAttribute('disabled');
      } else {
        addAddressBtn.setAttribute('disabled', 'disabled');
      }
    }

    function showAddressField(name) {
      const wrapper = getAddressWrapper(name);
      if (!wrapper) return;
      wrapper.classList.remove('d-none');
      updateAddressControls();
    }

    function hideAddressField(name, options = {}) {
      const wrapper = getAddressWrapper(name);
      if (!wrapper) return;
      if (options.clearValue) {
        const input = form?.elements[name];
        if (input) input.value = '';
      }
      wrapper.classList.add('d-none');
      updateAddressControls();
    }

    function showNextAddressField() {
      const next = addressFields.find((field) => {
        const wrapper = getAddressWrapper(field);
        return wrapper && wrapper.classList.contains('d-none');
      });
      if (!next) return;
      showAddressField(next);
      const input = form?.elements[next];
      if (input) {
        input.focus();
      }
    }

    form?.addEventListener('click', (event) => {
      const removeBtn = event.target.closest('[data-address-remove]');
      if (removeBtn) {
        const field = removeBtn.getAttribute('data-address-remove');
        if (field) {
          hideAddressField(field, { clearValue: true });
        }
        event.preventDefault();
      }
    });

    loadCustomers();
    updateAddressControls();
  })();
</script>
